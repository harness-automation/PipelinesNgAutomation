service: {{.Values.appci}}-{{.Values.serviceName}}-lambda

frameworkVersion: '2 || 3'

provider:

  name: aws

  stackName: harness-{{.Values.appci}}-{{.Values.serviceName}}-lambda1

  deploymentMethod: direct

  runtime: {{.Values.runtime}}

  versionFunctions: {{.Values.versionFunctions}}

  tracing:

    lambda: false

  deploymentPrefix: harness-{{.Values.appci}}

  vpc:

    securityGroupIds:

      {{.Values.BaselineSGID}}

    subnetIds:

      ${split(${self:custom.subnets}, ',')}

  tags:

    ApplicationCI: {{.Values.appci}}

    EnvironmentId: {{.Values.envName}}

  stackTags:

    ApplicationCI: {{.Values.appci}}

  environment:

    DD_API_KEY_SECRET_ARN: {{.Values.DDAPIKeySecretARN}}

    DD_ENV: {{.Values.envName}}

    DD_SERVICE: ${self:service}

    DD_VERSION: 1.3.5 #update with artifact tag

    DD_MERGE_XRAY_TRACES: {{.Values.DDXRAYTRACES}}

    DD_LAMBDA_HANDLER: {{.Values.LambdaHandler}}

    DD_TRACE_ENABLED: true

    dynamo_db: {{.Values.dynamoDb}}

    OPFLTURL: {{.Values.OPFLTURL}}

    STAFFPOSNURL: {{.Values.STAFFPOSNURL}}

    SPBACKSYNCURL: {{.Values.SPBACKSYNCURL}}

    S3bucket: {{.Values.S3bucket}}

    fascheduleLambda: {{.Values.fascheduleLambda}}

    fascheduleUrl: {{.Values.fascheduleUrl}}

    tripstatusUrl: {{.Values.tripstatusUrl}}

    flightstatusUrl: {{.Values.flightstatusUrl}}

    regionsUrl: {{.Values.regionsUrl}}

    regionCode: {{.Values.regionCode}}

    syncLambda: {{.Values.syncLambda}}

 

functions:

  Serverless:

    handler: datadog_lambda.handler.handler

    # This is a runtime handler should be DD handler, using DD layers 

    role: arn:aws:iam::806630305776:role/pluginroletestcf

    ephemeralStorageSize: 10240

    description:

    memorySize: {{.Values.memorySize}}

    timeout: {{.Values.timeout}}

    # url:

    #   authorizer: aws_iam

    layers:  
      - {{.Values.DatadogPythonLayer}}
      - {{.Values.DatadogExtensionLayer}}

 

package:

  artifact: <+artifact.path>

plugins:

  - serverless-deployment-bucket

  - serverless-plugin-utils


custom:

  subnets: "{{.Values.Subnets}}"

  datadog:

    site: Cloud Monitoring as a Service | Datadog 

    apiKeySecretArn: ${self:provider.environment.DD_API_KEY_SECRET_ARN}

    enableDDTracing: true

    enableDDLogs: true

    env: ${self:provider.environment.DD_ENV}

    service: ${self:provider.environment.DD_SERVICE}

    version: ${self:provider.environment.DD_VERSION}

    tags: "applicationci: {{.Values.appci}}"

 

resources:

  Outputs:

    LambdaFunctionArn:

      Description: Lambda Function Arn Output to export

      Value: !GetAtt ServerlessLambdaFunction.Arn

      Export:

        Name:

          Fn::Sub: ${self:service}-asdf
